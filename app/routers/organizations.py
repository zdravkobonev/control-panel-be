from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlalchemy.orm import Session
from sqlalchemy import select
from sqlalchemy.exc import IntegrityError

from ..dependencies import get_current_user
from ..db import get_db
from ..models import Organization, OrgStatus, Admin
from ..schemas import OrganizationOut, OrganizationCreate, OrganizationUpdate

from app.flux_provisioner import ensure_namespace, apply_helmrelease
# NEW: —â–µ –æ–ø–∏—Ç–∞–º–µ –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ helper, –∞–∫–æ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
try:
    from app.flux_provisioner import get_org_status  # –æ—á–∞–∫–≤–∞ str: "running" | "progressing" | "error"
except Exception:
    get_org_status = None  # —â–µ fallback-–Ω–µ–º –ø–æ-–¥–æ–ª—É

router = APIRouter(prefix="/organizations", tags=["organizations"])


def _map_cluster_state_to_org_status(cluster_state: str) -> OrgStatus:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∫–ª–∞—Å—Ç–µ—Ä–∞ –∫—ä–º OrgStatus.
    running      -> active
    progressing  -> pending
    error        -> error
    other        -> suspended
    """
    s = (cluster_state or "").lower()
    if s == "running":
        return OrgStatus.active
    if s == "progressing":
        return OrgStatus.pending
    if s == "error":
        return OrgStatus.error
    return OrgStatus.suspended


@router.get("", response_model=list[OrganizationOut])
def list_organizations(
    db: Session = Depends(get_db),
    current_user: Admin = Depends(get_current_user),
    skip: int = Query(0, ge=0),
    limit: int = Query(50, ge=1, le=200),
):
    rows = db.scalars(
        select(Organization)
        .where(Organization.is_deleted.is_(False))
        .offset(skip)
        .limit(limit)
    ).all()

    # –ê–∫–æ –∏–º–∞–º–µ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤ –∫–ª–∞—Å—Ç–µ—Ä–∞ ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–º–µ.
    updated = False
    for org in rows:
        # –∑–∞—â–∏—Ç–Ω–æ: –ø—Ä–µ—Å–∫–∞—á–∞–º–µ –∞–∫–æ –Ω—è–º–∞ –∏–º–µ
        if not org.name:
            continue

        try:
            if get_org_status is None:
                # –ù—è–º–∞–º–µ –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è: –ù–ï –ø—Ä–æ–º–µ–Ω—è–º–µ —Å—Ç–∞—Ç—É—Å–∞, —Å–∞–º–æ –≤—Ä—ä—â–∞–º–µ –∫–∞–∫–≤–æ—Ç–æ –µ –≤ –ë–î.
                continue

            cluster_state = get_org_status(org.name)  # "running" | "progressing" | "error"
            new_status = _map_cluster_state_to_org_status(cluster_state)

        except Exception:
            # –ê–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ç–∞ —Ñ–µ–π–ª–Ω–µ, –º–∞—Ä–∫–∏—Ä–∞–º–µ –∫–∞—Ç–æ suspended (–ø–æ-–Ω–µ—É—Ç—Ä–∞–ª–Ω–æ –æ—Ç error —Ç—É–∫)
            new_status = OrgStatus.suspended

        if new_status != org.status:
            org.status = new_status
            db.add(org)
            updated = True

    if updated:
        db.commit()
        # –Ω–µ –µ –Ω—É–∂–Ω–æ refresh –Ω–∞ –≤—Å–µ–∫–∏ —Ä–µ–¥ ‚Äî –≤–µ—á–µ —Å–∞ –≤ –ø–∞–º–µ—Ç—Ç–∞ —Å –Ω–æ–≤–∏—è —Å—Ç–∞—Ç—É—Å

    return rows


@router.post("", response_model=OrganizationOut, status_code=status.HTTP_201_CREATED)
def create_organization(
    payload: OrganizationCreate,
    current_user: Admin = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    org = Organization(
        name=payload.name,
        # SemVer –Ω–∏–∑; –ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ "1.0.0"
        version=payload.version if payload.version is not None else "1.0.0",
        status=payload.status if payload.status is not None else OrgStatus.pending,
    )
    db.add(org)
    try:
        db.commit()
    except IntegrityError:
        db.rollback()
        # –Ω–∞–π-—á–µ—Å—Ç–æ: —É–Ω–∏–∫–∞–ª–Ω–æ –∏–º–µ —Å–µ –¥—É–±–ª–∏—Ä–∞
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail="Organization with this name already exists.",
        )
    db.refresh(org)

    # –ò–∑–ø–æ–ª–∑–≤–∞–º–µ —Ä–µ–∞–ª–Ω–∞—Ç–∞ –≤–µ—Ä—Å–∏—è –æ—Ç –ë–î –∑–∞ —Ç–∞–≥–æ–≤–µ—Ç–µ
    be_tag = org.version
    fe_tag = org.version

    try:
        ensure_namespace(org.name)
        apply_helmrelease(org.name, be_tag, fe_tag)
    except Exception as e:
        # –∞–∫–æ provisioning-—ä—Ç —Å–µ –ø—Ä–æ–≤–∞–ª–∏ ‚Üí —Å—Ç–∞—Ç—É—Å error
        org.status = OrgStatus.error
        db.add(org)
        db.commit()
        raise HTTPException(500, f"Failed provisioning in cluster: {e}")

    return org


@router.patch("/{org_id}", response_model=OrganizationOut)
def update_organization(
    org_id: int,
    payload: OrganizationUpdate,
    current_user: Admin = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    org = db.get(Organization, org_id)
    if not org:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Organization not found.")
    if org.is_deleted:
        raise HTTPException(status_code=409, detail="Organization is deleted.")

    # üö´ –ó–∞–±—Ä–∞–Ω—è–≤–∞–º–µ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ –∏–º–µ—Ç–æ
    if payload.name is not None and payload.name != org.name:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Organization name cannot be changed."
        )

    # (–ø–æ –∏–∑–±–æ—Ä) –±–ª–æ–∫–∏—Ä–∞–π –≤—ä–Ω—à–Ω–∞ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–∑ —Ç–æ–∑–∏ –µ–Ω–¥–ø–æ–π–Ω—Ç
    if payload.status is not None and payload.status != org.status:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Organization status cannot be changed via this endpoint."
        )

    # –†–∞–∑—Ä–µ—à–µ–Ω–∞ –ø—Ä–æ–º—è–Ω–∞: —Å–∞–º–æ –≤–µ—Ä—Å–∏—è—Ç–∞
    version_changed = False
    if payload.version is not None and payload.version != org.version:
        org.version = payload.version
        org.status = OrgStatus.pending  # –∑–∞–ø–æ—á–≤–∞ –Ω–æ–≤ rollout
        version_changed = True

    db.add(org)
    try:
        db.commit()
    except IntegrityError:
        db.rollback()
        # –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω –≤—ä–∑–º–æ–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Ç—É–∫ –µ –ø–æ name, –Ω–æ –Ω–∏–µ –Ω–µ –≥–æ –ø–∏–ø–∞–º–µ; –≤—Å–µ –ø–∞–∫ –ø–∞–∑–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∞—Ç–∞
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail="Conflict while updating organization."
        )
    db.refresh(org)

    # –ê–∫–æ –≤–µ—Ä—Å–∏—è—Ç–∞ —Å–µ —Å–º–µ–Ω–∏ ‚Äî re-apply HelmRelease —Å –Ω–æ–≤–∏—Ç–µ —Ç–∞–≥–æ–≤–µ
    if version_changed:
        be_tag = org.version
        fe_tag = org.version
        try:
            apply_helmrelease(org.name, be_tag, fe_tag)
        except Exception as e:
            # –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª –Ω–∞ rollout ‚Üí –æ—Ç–±–µ–ª—è–∑–≤–∞–º–µ –∫–∞—Ç–æ error
            org.status = OrgStatus.error
            db.add(org)
            db.commit()
            raise HTTPException(500, f"Failed to roll out new version: {e}")

    return org


@router.delete("/{org_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_organization(
    org_id: int,
    current_user: Admin = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    org = db.get(Organization, org_id)
    if not org:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Organization not found.")
    
    if org.is_deleted:
        return None
    
    org.is_deleted = True
    org.status = OrgStatus.deleted
    db.add(org)
    db.commit()
    return None
